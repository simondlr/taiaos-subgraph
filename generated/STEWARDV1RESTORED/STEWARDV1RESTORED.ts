// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogBuy extends ethereum.Event {
  get params(): LogBuy__Params {
    return new LogBuy__Params(this);
  }
}

export class LogBuy__Params {
  _event: LogBuy;

  constructor(event: LogBuy) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogCollection extends ethereum.Event {
  get params(): LogCollection__Params {
    return new LogCollection__Params(this);
  }
}

export class LogCollection__Params {
  _event: LogCollection;

  constructor(event: LogCollection) {
    this._event = event;
  }

  get collected(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogForeclosure extends ethereum.Event {
  get params(): LogForeclosure__Params {
    return new LogForeclosure__Params(this);
  }
}

export class LogForeclosure__Params {
  _event: LogForeclosure;

  constructor(event: LogForeclosure) {
    this._event = event;
  }

  get prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogPriceChange extends ethereum.Event {
  get params(): LogPriceChange__Params {
    return new LogPriceChange__Params(this);
  }
}

export class LogPriceChange__Params {
  _event: LogPriceChange;

  constructor(event: LogPriceChange) {
    this._event = event;
  }

  get newPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class STEWARDV1RESTORED__patronageOwedWithTimestampResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class STEWARDV1RESTORED extends ethereum.SmartContract {
  static bind(address: Address): STEWARDV1RESTORED {
    return new STEWARDV1RESTORED("STEWARDV1RESTORED", address);
  }

  art(): Address {
    let result = super.call("art", "art():(address)", []);

    return result[0].toAddress();
  }

  try_art(): ethereum.CallResult<Address> {
    let result = super.tryCall("art", "art():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  artist(): Address {
    let result = super.call("artist", "artist():(address)", []);

    return result[0].toAddress();
  }

  try_artist(): ethereum.CallResult<Address> {
    let result = super.tryCall("artist", "artist():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  artistFund(): BigInt {
    let result = super.call("artistFund", "artistFund():(uint256)", []);

    return result[0].toBigInt();
  }

  try_artistFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("artistFund", "artistFund():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentCollected(): BigInt {
    let result = super.call(
      "currentCollected",
      "currentCollected():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentCollected(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentCollected",
      "currentCollected():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(): BigInt {
    let result = super.call("deposit", "deposit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_deposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deposit", "deposit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositAbleToWithdraw(): BigInt {
    let result = super.call(
      "depositAbleToWithdraw",
      "depositAbleToWithdraw():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_depositAbleToWithdraw(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositAbleToWithdraw",
      "depositAbleToWithdraw():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  foreclosed(): boolean {
    let result = super.call("foreclosed", "foreclosed():(bool)", []);

    return result[0].toBoolean();
  }

  try_foreclosed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("foreclosed", "foreclosed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  foreclosureTime(): BigInt {
    let result = super.call(
      "foreclosureTime",
      "foreclosureTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_foreclosureTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "foreclosureTime",
      "foreclosureTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oldV1(): Address {
    let result = super.call("oldV1", "oldV1():(address)", []);

    return result[0].toAddress();
  }

  try_oldV1(): ethereum.CallResult<Address> {
    let result = super.tryCall("oldV1", "oldV1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  patronageOwed(): BigInt {
    let result = super.call("patronageOwed", "patronageOwed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_patronageOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "patronageOwed",
      "patronageOwed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  patronageOwedRange(_time: BigInt): BigInt {
    let result = super.call(
      "patronageOwedRange",
      "patronageOwedRange(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_time)]
    );

    return result[0].toBigInt();
  }

  try_patronageOwedRange(_time: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "patronageOwedRange",
      "patronageOwedRange(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_time)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  patronageOwedWithTimestamp(): STEWARDV1RESTORED__patronageOwedWithTimestampResult {
    let result = super.call(
      "patronageOwedWithTimestamp",
      "patronageOwedWithTimestamp():(uint256,uint256)",
      []
    );

    return new STEWARDV1RESTORED__patronageOwedWithTimestampResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_patronageOwedWithTimestamp(): ethereum.CallResult<
    STEWARDV1RESTORED__patronageOwedWithTimestampResult
  > {
    let result = super.tryCall(
      "patronageOwedWithTimestamp",
      "patronageOwedWithTimestamp():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new STEWARDV1RESTORED__patronageOwedWithTimestampResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  patrons(param0: Address): boolean {
    let result = super.call("patrons", "patrons(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_patrons(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("patrons", "patrons(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  price(): BigInt {
    let result = super.call("price", "price():(uint256)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pullFunds(param0: Address): BigInt {
    let result = super.call("pullFunds", "pullFunds(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_pullFunds(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pullFunds", "pullFunds(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  restored(): boolean {
    let result = super.call("restored", "restored():(bool)", []);

    return result[0].toBoolean();
  }

  try_restored(): ethereum.CallResult<boolean> {
    let result = super.tryCall("restored", "restored():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  restorer(): Address {
    let result = super.call("restorer", "restorer():(address)", []);

    return result[0].toAddress();
  }

  try_restorer(): ethereum.CallResult<Address> {
    let result = super.tryCall("restorer", "restorer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  snapshotV1Owner(): Address {
    let result = super.call(
      "snapshotV1Owner",
      "snapshotV1Owner():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_snapshotV1Owner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "snapshotV1Owner",
      "snapshotV1Owner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  snapshotV1Price(): BigInt {
    let result = super.call(
      "snapshotV1Price",
      "snapshotV1Price():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_snapshotV1Price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "snapshotV1Price",
      "snapshotV1Price():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeAcquired(): BigInt {
    let result = super.call("timeAcquired", "timeAcquired():(uint256)", []);

    return result[0].toBigInt();
  }

  try_timeAcquired(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("timeAcquired", "timeAcquired():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeHeld(param0: Address): BigInt {
    let result = super.call("timeHeld", "timeHeld(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_timeHeld(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("timeHeld", "timeHeld(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeLastCollected(): BigInt {
    let result = super.call(
      "timeLastCollected",
      "timeLastCollected():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timeLastCollected(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeLastCollected",
      "timeLastCollected():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalCollected(): BigInt {
    let result = super.call("totalCollected", "totalCollected():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalCollected(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollected",
      "totalCollected():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _artist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _artwork(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _snapshotV1Price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _snapshotV1Owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _oldV1Address(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _collectPatronageCall extends ethereum.Call {
  get inputs(): _collectPatronageCall__Inputs {
    return new _collectPatronageCall__Inputs(this);
  }

  get outputs(): _collectPatronageCall__Outputs {
    return new _collectPatronageCall__Outputs(this);
  }
}

export class _collectPatronageCall__Inputs {
  _call: _collectPatronageCall;

  constructor(call: _collectPatronageCall) {
    this._call = call;
  }
}

export class _collectPatronageCall__Outputs {
  _call: _collectPatronageCall;

  constructor(call: _collectPatronageCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _currentPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class ChangePriceCall extends ethereum.Call {
  get inputs(): ChangePriceCall__Inputs {
    return new ChangePriceCall__Inputs(this);
  }

  get outputs(): ChangePriceCall__Outputs {
    return new ChangePriceCall__Outputs(this);
  }
}

export class ChangePriceCall__Inputs {
  _call: ChangePriceCall;

  constructor(call: ChangePriceCall) {
    this._call = call;
  }

  get _newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangePriceCall__Outputs {
  _call: ChangePriceCall;

  constructor(call: ChangePriceCall) {
    this._call = call;
  }
}

export class DepositWeiCall extends ethereum.Call {
  get inputs(): DepositWeiCall__Inputs {
    return new DepositWeiCall__Inputs(this);
  }

  get outputs(): DepositWeiCall__Outputs {
    return new DepositWeiCall__Outputs(this);
  }
}

export class DepositWeiCall__Inputs {
  _call: DepositWeiCall;

  constructor(call: DepositWeiCall) {
    this._call = call;
  }
}

export class DepositWeiCall__Outputs {
  _call: DepositWeiCall;

  constructor(call: DepositWeiCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class RestoreCall extends ethereum.Call {
  get inputs(): RestoreCall__Inputs {
    return new RestoreCall__Inputs(this);
  }

  get outputs(): RestoreCall__Outputs {
    return new RestoreCall__Outputs(this);
  }
}

export class RestoreCall__Inputs {
  _call: RestoreCall;

  constructor(call: RestoreCall) {
    this._call = call;
  }
}

export class RestoreCall__Outputs {
  _call: RestoreCall;

  constructor(call: RestoreCall) {
    this._call = call;
  }
}

export class WithdrawArtistFundsCall extends ethereum.Call {
  get inputs(): WithdrawArtistFundsCall__Inputs {
    return new WithdrawArtistFundsCall__Inputs(this);
  }

  get outputs(): WithdrawArtistFundsCall__Outputs {
    return new WithdrawArtistFundsCall__Outputs(this);
  }
}

export class WithdrawArtistFundsCall__Inputs {
  _call: WithdrawArtistFundsCall;

  constructor(call: WithdrawArtistFundsCall) {
    this._call = call;
  }
}

export class WithdrawArtistFundsCall__Outputs {
  _call: WithdrawArtistFundsCall;

  constructor(call: WithdrawArtistFundsCall) {
    this._call = call;
  }
}

export class WithdrawDepositCall extends ethereum.Call {
  get inputs(): WithdrawDepositCall__Inputs {
    return new WithdrawDepositCall__Inputs(this);
  }

  get outputs(): WithdrawDepositCall__Outputs {
    return new WithdrawDepositCall__Outputs(this);
  }
}

export class WithdrawDepositCall__Inputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }

  get _wei(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawDepositCall__Outputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }
}

export class WithdrawPullFundsCall extends ethereum.Call {
  get inputs(): WithdrawPullFundsCall__Inputs {
    return new WithdrawPullFundsCall__Inputs(this);
  }

  get outputs(): WithdrawPullFundsCall__Outputs {
    return new WithdrawPullFundsCall__Outputs(this);
  }
}

export class WithdrawPullFundsCall__Inputs {
  _call: WithdrawPullFundsCall;

  constructor(call: WithdrawPullFundsCall) {
    this._call = call;
  }
}

export class WithdrawPullFundsCall__Outputs {
  _call: WithdrawPullFundsCall;

  constructor(call: WithdrawPullFundsCall) {
    this._call = call;
  }
}
