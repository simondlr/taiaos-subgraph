// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Patron extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Patron entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Patron must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Patron", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Patron | null {
    return changetype<Patron | null>(store.get_in_block("Patron", id));
  }

  static load(id: string): Patron | null {
    return changetype<Patron | null>(store.get("Patron", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stewards(): PatronStewardLoader {
    return new PatronStewardLoader(
      "Patron",
      this.get("id")!.toString(),
      "stewards",
    );
  }
}

export class Steward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Steward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Steward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Steward", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Steward | null {
    return changetype<Steward | null>(store.get_in_block("Steward", id));
  }

  static load(id: string): Steward | null {
    return changetype<Steward | null>(store.get("Steward", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousPatron(): string {
    let value = this.get("previousPatron");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set previousPatron(value: string) {
    this.set("previousPatron", Value.fromString(value));
  }

  get currentPatron(): string {
    let value = this.get("currentPatron");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set currentPatron(value: string) {
    this.set("currentPatron", Value.fromString(value));
  }

  get currentPrice(): BigInt {
    let value = this.get("currentPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentPrice(value: BigInt) {
    this.set("currentPrice", Value.fromBigInt(value));
  }

  get currentDeposit(): BigInt {
    let value = this.get("currentDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentDeposit(value: BigInt) {
    this.set("currentDeposit", Value.fromBigInt(value));
  }

  get timeAcquired(): BigInt {
    let value = this.get("timeAcquired");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeAcquired(value: BigInt) {
    this.set("timeAcquired", Value.fromBigInt(value));
  }

  get timeLastCollected(): BigInt {
    let value = this.get("timeLastCollected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeLastCollected(value: BigInt) {
    this.set("timeLastCollected", Value.fromBigInt(value));
  }

  get foreclosureTime(): BigInt {
    let value = this.get("foreclosureTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set foreclosureTime(value: BigInt) {
    this.set("foreclosureTime", Value.fromBigInt(value));
  }

  get totalCollected(): BigInt {
    let value = this.get("totalCollected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCollected(value: BigInt) {
    this.set("totalCollected", Value.fromBigInt(value));
  }

  get patrons(): PatronStewardLoader {
    return new PatronStewardLoader(
      "Steward",
      this.get("id")!.toString(),
      "patrons",
    );
  }
}

export class PatronSteward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PatronSteward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PatronSteward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PatronSteward", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PatronSteward | null {
    return changetype<PatronSteward | null>(
      store.get_in_block("PatronSteward", id),
    );
  }

  static load(id: string): PatronSteward | null {
    return changetype<PatronSteward | null>(store.get("PatronSteward", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get patron(): string {
    let value = this.get("patron");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set patron(value: string) {
    this.set("patron", Value.fromString(value));
  }

  get steward(): string {
    let value = this.get("steward");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set steward(value: string) {
    this.set("steward", Value.fromString(value));
  }

  get collected(): BigInt {
    let value = this.get("collected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collected(value: BigInt) {
    this.set("collected", Value.fromBigInt(value));
  }

  get timeHeld(): BigInt {
    let value = this.get("timeHeld");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeHeld(value: BigInt) {
    this.set("timeHeld", Value.fromBigInt(value));
  }
}

export class PatronStewardLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PatronSteward[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PatronSteward[]>(value);
  }
}
