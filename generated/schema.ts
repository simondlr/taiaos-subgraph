// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Patron extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Patron entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Patron entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Patron", id.toString(), this);
  }

  static load(id: string): Patron | null {
    return store.get("Patron", id) as Patron | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stewards(): Array<string> | null {
    let value = this.get("stewards");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stewards(value: Array<string> | null) {
    if (value === null) {
      this.unset("stewards");
    } else {
      this.set("stewards", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Steward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Steward entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Steward entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Steward", id.toString(), this);
  }

  static load(id: string): Steward | null {
    return store.get("Steward", id) as Steward | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousPatron(): string {
    let value = this.get("previousPatron");
    return value.toString();
  }

  set previousPatron(value: string) {
    this.set("previousPatron", Value.fromString(value));
  }

  get currentPatron(): string {
    let value = this.get("currentPatron");
    return value.toString();
  }

  set currentPatron(value: string) {
    this.set("currentPatron", Value.fromString(value));
  }

  get currentPrice(): BigInt {
    let value = this.get("currentPrice");
    return value.toBigInt();
  }

  set currentPrice(value: BigInt) {
    this.set("currentPrice", Value.fromBigInt(value));
  }

  get currentDeposit(): BigInt {
    let value = this.get("currentDeposit");
    return value.toBigInt();
  }

  set currentDeposit(value: BigInt) {
    this.set("currentDeposit", Value.fromBigInt(value));
  }

  get timeAcquired(): BigInt {
    let value = this.get("timeAcquired");
    return value.toBigInt();
  }

  set timeAcquired(value: BigInt) {
    this.set("timeAcquired", Value.fromBigInt(value));
  }

  get timeLastCollected(): BigInt {
    let value = this.get("timeLastCollected");
    return value.toBigInt();
  }

  set timeLastCollected(value: BigInt) {
    this.set("timeLastCollected", Value.fromBigInt(value));
  }

  get foreclosureTime(): BigInt {
    let value = this.get("foreclosureTime");
    return value.toBigInt();
  }

  set foreclosureTime(value: BigInt) {
    this.set("foreclosureTime", Value.fromBigInt(value));
  }

  get totalCollected(): BigInt {
    let value = this.get("totalCollected");
    return value.toBigInt();
  }

  set totalCollected(value: BigInt) {
    this.set("totalCollected", Value.fromBigInt(value));
  }

  get patrons(): Array<string> | null {
    let value = this.get("patrons");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set patrons(value: Array<string> | null) {
    if (value === null) {
      this.unset("patrons");
    } else {
      this.set("patrons", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class PatronSteward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PatronSteward entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PatronSteward entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PatronSteward", id.toString(), this);
  }

  static load(id: string): PatronSteward | null {
    return store.get("PatronSteward", id) as PatronSteward | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get patron(): string {
    let value = this.get("patron");
    return value.toString();
  }

  set patron(value: string) {
    this.set("patron", Value.fromString(value));
  }

  get steward(): string {
    let value = this.get("steward");
    return value.toString();
  }

  set steward(value: string) {
    this.set("steward", Value.fromString(value));
  }

  get collected(): BigInt {
    let value = this.get("collected");
    return value.toBigInt();
  }

  set collected(value: BigInt) {
    this.set("collected", Value.fromBigInt(value));
  }

  get timeHeld(): BigInt {
    let value = this.get("timeHeld");
    return value.toBigInt();
  }

  set timeHeld(value: BigInt) {
    this.set("timeHeld", Value.fromBigInt(value));
  }
}
